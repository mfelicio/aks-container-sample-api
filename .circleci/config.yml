version: 2
jobs:

  build:
    docker:
      - image: paulinhu/netcore-docker-build
    environment:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - checkout
      - run: dotnet restore src
      - run: dotnet build src
      - run: dotnet test src/Sample.Tests

      # Once unit-tests pass, create docker image
      # For security purposes, circleci requires this step to isolate remote docker commands. 
      #Â More info at: https://circleci.com/docs/2.0/building-docker-images/
      - setup_remote_docker

      - run: |
          dotnet publish src/Sample.Web.Api/Sample.Web.Api.csproj -c Release -f netcoreapp2.0
          cp src/Dockerfile src/Sample.Web.Api/bin/Release/netcoreapp2.0/publish/
          docker build --rm --no-cache -t $DOCKER_IMAGE_NAME_WITH_REGISTRY src/Sample.Web.Api/bin/Release/netcoreapp2.0/publish/
          docker login $DOCKER_REGISTRY_URI -u $DOCKER_REGISTRY_SERVER_USERNAME -p $DOCKER_REGISTRY_SERVER_PASSWORD
          docker push $DOCKER_IMAGE_NAME_WITH_REGISTRY

  deploy_onto_kube:
    docker:
      - image: azuresdk/azure-cli-python
    
    steps:
      # LOGIN ONTO AZURE WITH EXISTING SERVICE PRINCIPAL
      - run: az login --service-principal -u $SERVICE_PRINCIPAL --password $SERVICE_PRINCIPAL_PASS --tenant $SERVICE_TENANT
      
      # DOWNLOAD SSH KEY
      - run: az provider register -n Microsoft.KeyVault
      - run: az keyvault secret download --vault-name $KEYVAULT_NAME --name cluster-ssh --file ./cluster-ssh
      - run: az keyvault secret download --vault-name $KEYVAULT_NAME --name cluster-ssh-pub --file ./cluster-ssh.pub

      # CREATE AKS CLUSTER, THEN DELETE SSH KEY
      - run: az provider register -n Microsoft.ContainerService
      - run: az aks install-cli
      - run: az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME
      - run: kubectl get nodes


workflows:
  version: 2
  build_and_test:
    jobs:
      - build

      - deploy_onto_kube:
          requires:
            - build